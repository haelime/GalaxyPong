worker_processes auto;  # CPU 코어 수에 따라 worker 프로세스 수를 자동으로 설정

error_log /var/log/nginx/error.log;  # 에러 로그 파일 위치 설정

include /usr/share/nginx/modules/*.conf;  # nginx 모듈 설정 파일 포함

events {
    worker_connections 1024;  # 각 worker 프로세스가 처리할 수 있는 최대 연결 수
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';  # 로그 포맷 정의

    access_log /var/log/nginx/access.log main;  # 접근 로그 파일 위치 및 포맷 설정

    sendfile on;  # sendfile() 시스템 호출 사용 (파일 송신 성능 향상)
    tcp_nopush on;  # TCP_NOPUSH 옵션 활성화 (패킷 최적화)
    tcp_nodelay on;  # TCP_NODELAY 옵션 활성화 (지연 최소화)
    keepalive_timeout 65;  # keep-alive 연결의 타임아웃 설정
    types_hash_max_size 2048;  # MIME 타입 해시 테이블의 최대 크기 설정

    client_max_body_size 16M;  # 클라이언트 요청 본문의 최대 크기 설정

    include /etc/nginx/mime.types;  # MIME 타입 설정 파일 포함
    default_type application/octet-stream;  # 기본 MIME 타입 설정

    # include /etc/nginx/conf.d/*.conf;  # 추가 설정 파일 포함
    # HTTP 리다이렉트 서버 블록 추가
    server {
        listen 80 default_server;
        server_name _;

        location / {
            return 301 https://$host$request_uri;  # HTTPS로 리다이렉트
        }
    }

    server {
        listen 443 ssl;  # 포트 443에서 HTTPS 요청 수신
        server_name localhost;  # 서버 도메인 이름 설정

        ssl_protocols TLSv1.2 TLSv1.3;  # 사용 가능한 SSL/TLS 프로토콜 설정
        ssl_certificate /etc/nginx/ssl/nginx.crt;  # SSL 인증서 파일 경로 설정
        ssl_certificate_key /etc/nginx/ssl/nginx.key;  # SSL 인증서 키 파일 경로 설정

        add_header X-Frame-Options SAMEORIGIN;  # X-Frame-Options 헤더 추가 (클릭재킹 방지)
        add_header X-Content-Type-Options nosniff;  # X-Content-Type-Options 헤더 추가 (MIME 타입 스니핑 방지)
        add_header X-XSS-Protection "1; mode=block";  # X-XSS-Protection 헤더 추가 (XSS 공격 방지)

        access_log /var/log/nginx/host.access.log main;

        root /usr/share/nginx/html;
        index index.html index.htm;


        # TODO : index를 제외한 모든 요청을 index.html로 리다이렉트해야 함

        location / {
            try_files $uri $uri/ /index.html;
        }

        location /api/ {
            proxy_pass http://backend:8000/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-CSRFToken $http_x_csrftoken;
            proxy_cookie_path / "/; HTTPOnly; Secure; SameSite=Lax";
        }

        # location /api/ {
        #     proxy_pass http://backend:8000;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #     proxy_set_header X-CSRFToken $http_x_csrftoken;
        #     proxy_cookie_path / "/; HTTPOnly; Secure; SameSite=Lax";
        # }

        location /ws/ {
            proxy_pass http://backend:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /images/ {
            alias /usr/share/nginx/images/;

        }
        location /media/ {
            alias /usr/share/nginx/media/;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
            deny all;
        }
    }
}